<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>The Globe | Air Travel</title>
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <link rel="shortcut icon" href="assets/icons/exb.ico" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css"
    />
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.min.css"
    />
    <link
      rel="stylesheet"
      href="https://icons.getbootstrap.com/assets/font/bootstrap-icons.min.css"
    />
    <link href="./assets/css/index.css" rel="stylesheet" />
    <link href="./assets/css/common.css" rel="stylesheet" />
    <link href="./assets/css/airtravel.css" rel="stylesheet" />

    <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
    <style>
      body {
        margin: 0;
        padding: 0;
      }
      #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <div id="toggle-layer-button-wrapper-div">
      <div class="position-relative">
        <div class="text-white text-right">
          <a
            id="view-toggle-layer-btn"
            class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center"
            ><i class="bi bi-stack"></i
          ></a>
          <a
            class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center my-2"
            onclick="flyHome()"
            ><i class="bi bi-house-door"></i
          ></a>
        </div>
        <div
          id="toggle-layers-view-card"
          class="card bg-map-dark border-0 toggle-layer-accordion-wrapper-card d-none"
          style="
            border-radius: 0;
            position: absolute;
            right: 50px;
            top: 0;
            min-width: 300px;
          "
        >
          <div class="card-body p-2 border-radius-0 fs-6-5">
            <div
              id="toggle-layer-accordion"
              class="border-radius-0 accordion w-100 border-0"
            >
              <div class="card bg-black mb-1 pb-2">
                <div class="card-header pb-3">
                  <a
                    class="card-link text-white"
                    id="toggle-routes-btn"
                    data-toggle="collapse"
                    href="#accordion-routes"
                  >
                    <i
                      class="bi bi-eye-slash px-2"
                      onclick="toggleViewLayer(event, 1)"
                    ></i
                    >Routes Flight
                    <i
                      class="bi bi-filter-square-fill accordion-card-header-icon"
                    ></i>
                  </a>
                </div>
                <div
                  id="accordion-routes"
                  class="collapse show"
                  data-parent="#toggle-layer-accordion"
                >
                  <div class="card-body bg-map-dark border-0 pt-1">
                    <!-- <img src="./assets/icons/blue_pointer.png" width="25px" height="25px" /> -->
                  </div>
                </div>
              </div>
              <div class="card bg-black mb-1 pb-2">
                <div class="card-header pb-3">
                  <a
                    class="collapsed card-link text-white"
                    id="toggle-flights-btn"
                    data-toggle="collapse"
                    href="#accordion-flights"
                  >
                    <i
                      class="bi bi-eye px-2"
                      onclick="toggleViewLayer(event, 2)"
                    ></i
                    >Flights
                    <i
                      class="bi bi-filter-square-fill accordion-card-header-icon"
                    ></i>
                  </a>
                </div>
                <div
                  id="accordion-flights"
                  class="collapse"
                  data-parent="#toggle-layer-accordion"
                >
                  <div class="card-body bg-map-dark border-0 pt-1">
                    <img
                      src="./assets/icons/plane_icon.png"
                      width="20px"
                      height="20px"
                    />
                  </div>
                </div>
              </div>
              <div class="card bg-black mb-1 pb-2">
                <div class="card-header pb-3">
                  <a
                    class="collapsed card-link text-white"
                    id="toggle-arrival-btn"
                    data-toggle="collapse"
                    href="#arrival-accordion-part"
                  >
                    <i
                      class="bi bi-eye-slash px-2"
                      onclick="toggleViewLayer(event, 3)"
                    ></i
                    >Arrival
                    <i
                      class="bi bi-filter-square-fill accordion-card-header-icon"
                    ></i>
                  </a>
                </div>
                <div
                  id="arrival-accordion-part"
                  class="collapse"
                  data-parent="#accordion"
                >
                  <div class="card-body bg-map-dark pt-1 pb-3 border-0">
                    <div class="d-flex">
                      <img
                        src="./assets/icons/arrival.png"
                        width="20px"
                        height="20px"
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div class="card bg-black pb-2">
                <div class="card-header pb-3">
                  <a
                    class="collapsed card-link text-white"
                    id="toggle-departure-btn"
                    data-toggle="collapse"
                    href="#departure-accordion-part"
                  >
                    <i
                      class="bi bi-eye-slash px-2"
                      onclick="toggleViewLayer(event, 4)"
                    ></i
                    >Departure
                    <i
                      class="bi bi-filter-square-fill accordion-card-header-icon"
                    ></i>
                  </a>
                </div>
                <div
                  id="departure-accordion-part"
                  class="collapse"
                  data-parent="#accordion"
                >
                  <div class="card-body bg-map-dark border-0 pt-0 pb-3">
                    <div class="d-flex">
                      <img
                        src="./assets/icons/departure.png"
                        width="25px"
                        height="25px"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="view-place-input-wrapper-div">
      <div class="position-relative">
        <input
          type="text"
          id="view-route-search-input"
          class=""
          placeholder="Routes"
          name="search2"
        />
        <input type="hidden" id="autocomplete-select-id" />
        <a
          class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center"
          type="submit"
          ><i class="bi bi-search"></i
        ></a>
      </div>
    </div>
    <div id="top-left-buttons-wrapper-div">
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center my-0-5 map-control-btn"
        onclick="doZoomIn()"
      >
        <img src="./assets/icons/plus.png" class="img-fluid" />
      </button>
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center mb-2 map-control-btn"
        onclick="doZoomOut()"
      >
        <i class="bi bi-dash-lg fs-4"></i>
      </button>
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 justify-content-center align-items-center my-0-5 d-none"
      >
        <i class="bi bi-arrows-move"></i>
      </button>
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 justify-content-center align-items-center mb-2 d-none"
      >
        <i class="bi bi-arrow-clockwise"></i>
      </button>
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 justify-content-center align-items-center mb-3 d-none"
        style="border-radius: 50%"
      >
        <i class="bi bi-plus"></i>
      </button>
      <button
        id="btn-spin"
        class="btn btn-transparent border-radius-0 d-none justify-content-center align-items-center"
      >
        <i class="bi bi-play text-white" style="font-size: 2.75rem"></i>
      </button>
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center mt-2 map-control-btn"
        id="view-top-flights-card-btn"
      >
        <i class="bi bi-airplane"></i>
      </button>
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center my-0-5 map-control-btn"
        id="view-regular-flights-card-btn"
      >
        <i class="bi bi-airplane"></i>
      </button>
    </div>
    <div
      id="top-flights-view-card"
      class="card bg-map-dark border-0 toggle-layer-accordion-wrapper-card d-none"
    >
      <div
        class="card-header p-2 d-flex justify-content-center align-items-center"
        style="background-color: #303030"
      >
        <h5 class="mb-0" style="color: #faeb00">Routes with over 50 tickets</h5>
      </div>
      <div class="card-body p-1 border-radius-0 fs-6-5 bg-white">
        <div class="container tableFixHead px-1">
          <table class="table">
            <thead>
              <th width="33%">Departure</th>
              <th width="33%">Arrival</th>
              <th width="33%">Tickets</th>
            </thead>
            <tbody></tbody>
          </table>
        </div>
        <div class="row d-none">
          <div class="col">
            <img src="./assets/icons/plane_icon_level1.png" width="20px" /><span
              id="level_1_criteria_display_dom"
              class="criteria"
            ></span>
          </div>
          <div class="col">
            <img src="./assets/icons/plane_icon_level2.png" width="20px" /><span
              id="level_2_criteria_display_dom"
              class="criteria"
            ></span>
          </div>
          <div class="col">
            <img src="./assets/icons/plane_icon_level3.png" width="20px" /><span
              id="level_3_criteria_display_dom"
              class="criteria"
            ></span>
          </div>
        </div>
      </div>
    </div>
    <div
      id="regular-flights-view-card"
      class="card bg-map-dark border-0 toggle-layer-accordion-wrapper-card d-none"
    >
      <div
        class="card-header p-2 d-flex justify-content-center align-items-center"
        style="background-color: white"
      >
        <h5 class="mb-0" style="color: #18375f">
          Routes with less than 50 tickets
        </h5>
      </div>
      <div class="card-body p-1 border-radius-0 fs-6-5 bg-white text-primary">
        <div class="container tableFixHead px-1">
          <table class="table">
            <thead>
              <th width="33%">Departure</th>
              <th width="33%">Arrival</th>
              <th width="33%">Tickets</th>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
    </div>
    <div id="bottom-left-buttons-wrapper-div" class="">
      <a
        href="index.htm"
        class="btn btn-outline-blue d-flex align-items-center my-1 w-100 p-0"
        target="_self"
        ><i class="bi bi-link-45deg fs-4 mx-2"></i> Offices
      </a>
      <a
        href="fleet.htm"
        class="btn btn-outline-blue d-flex align-items-center my-1 w-100 p-0"
        target="_self"
        ><i class="bi bi-link-45deg fs-4 mx-2"></i> Fleet
      </a>
      <a
        href="our-team.htm"
        class="btn btn-outline-blue d-flex align-items-center my-1 w-100 p-0"
        target="_self"
        ><i class="bi bi-link-45deg fs-4 mx-2"></i> Meet the team
      </a>
      <a
        href="qrcode.htm"
        class="btn btn-outline-blue d-flex align-items-center my-1 w-100 p-0"
        target="_self"
        ><i class="bi bi-link-45deg fs-4 mx-2"></i> ... Much more
      </a>
    </div>
    <div id="left-title">
      <span class="text-white fs-2 fw-600">
        UNHCR air travel’s environmental footprint
      </span>
    </div>
    <div id="right-title">
      <img class="img-fluid" src="./assets/img/UNHCR Logo white.png" />
    </div>

    <div id="right-panel" class="" style="border-left: 2px solid white">
      <div class="mx-0 pt-3" id="right-inner-panel">
        <div
          id="chartContainer"
          style="width: 100%; min-height: 250px; align-items: start !important"
        ></div>

        <div id="airtravel-info">
          <p class="w-100 fs-16px fw-600">Air Travel</p>
          <div class="row w-100">
            <div class="col-md-3 col-sm-6 p-1">
              <img src="./assets/icons/CO2.png" class="img-fluid panel-image" />
            </div>
            <div class="col-md-9 col-sm-6">
              <h6><strong id="co2_display_dom"> 0 </strong></h6>
              <p class="fs-13px mb-0">Tons of CO<sub>2</sub> emitted</p>
              <p class="fs-13px">
                which represent the
                <strong id="co2-pro-display-dom"></strong> % of the total CO<sub
                  >2</sub
                >
                emitted
              </p>
            </div>
          </div>
          <div class="row w-100">
            <div class="col-md-3 col-sm-6 p-1">
              <div class="w-100">
                <img
                  src="./assets/icons/tickets.png"
                  class="img-fluid panel-image"
                />
              </div>
            </div>
            <div class="col-md-9 col-sm-6">
              <h6><strong id="tickets_display_dom"> 0 </strong></h6>
              <p class="fs-13px">Number of tickets purchased</p>
            </div>
          </div>
          <div class="row w-100">
            <div class="col-md-3 col-sm-6 p-1">
              <div class="w-100">
                <img
                  src="./assets/icons/dollar.png"
                  class="img-fluid panel-image"
                />
              </div>
            </div>
            <div class="col-md-9 col-sm-6">
              <h6><strong id="net_spend_display_dom"> 0 </strong></h6>
              <p class="fs-13px">Net Spend (USD)</p>
            </div>
          </div>
          <div class="row w-100 d-flex justify-content-center">
            <p class="fs-11px">
              * Total CO<sub>2</sub> emissions for air travel only
            </p>
          </div>
        </div>
        <!-- <div id="status-view-panel" class="text-white text-center px-3 py-3 position-relative w-100 h-100">
            <hr class="w-100 my-4" style="border-top:2px solid white;">
            <p class="text-white text-center fw-600 fs-16px py-2">Estimated Offices Power Consumption</p>
            <div class="row bold w-100 px-3 my-3">
              <div class="col-sm-4">
                <img src="./assets/icons/power c.png" class="img-fluid" />
              </div>
              <div class="col-sm-8">
                <span class="d-flex align-items-center h-100"><strong id="KWH-display-dom" class="mx-2"> 0 &nbsp; </strong> <strong>KWh</strong></span>
              </div>  
            </div>
            <p class="fs-10px mt-4 w-100">2023 year to date</p>
            <p class="fs-9px mx-5 my-1">Estimated Offices Power Consumption based on 2023's greenhouse' readings</p>
            <hr class="w-100 mt-4 mb-5" style="border-top:2px solid white;">
            <p class="w-100 fs-16px fw-600 mb-5 mt-10">Greening The Blue 2023 </p>
            <div class="w-100 mx-2">
                <div class="row my-5">
                    <div class="col-md-3 col-sm-6">
                        <img src="./assets/icons/CO2.png" class="img-fluid">
                    </div>
                    <div class="col-md-8 col-sm-5">
                        <h6 id="co2_display_dom"> 0 </h6>
                        <p class="fs-13px">(Tons of CO<sub>2</sub> emitted) </p>
                    </div>
                </div>
                <div class="row my-5">
                    <div class="col-md-3 col-sm-6">
                        <img src="./assets/icons/water.png" class="img-fluid" />
                    </div>
                    <div class="col-md-8 col-sm-5">
                        <h6 id="used_water_display_div"> 0 </h6>
                        <p class="fs-13px">(m<sub>3</sub> of water used)</p>
                    </div>
                </div>
                <div class="row my-5">
                    <div class="col-md-3 col-sm-6">
                        <img src="./assets/icons/waste.png" class="img-fluid">
                    </div>
                    <div class="col-md-8 col-sm-5">
                        <h6 id="generated_waste_display_div"> 0 </h6>
                        <p class="fs-13px">(Kg of waste generated)</p>
                    </div>
                </div>
                <div class="row"></div>
            </div>
            <hr class="mt-8 px-4" style="border-top:2px solid white;">
            
        </div> -->
      </div>
    </div>
    <div class="container">
      <div class="card bg-map-dark d-none" style="width: 350px">
        <div class="card-header pb-0 border-0">
          <strong>UNHCR Office</strong>
          <p class="mb-0" style="color: yellow">Nairobi</p>
        </div>
        <div class="card-body text-center px-0">
          <div class="row bg-map-green mx-0 fs-5 text-left">
            <div class="col-sm-6">Office Type</div>
            <div class="col-sm-6">Country Office</div>
          </div>
          <div class="row px-3 fs-5 text-left">
            <div class="col-sm-6">Country</div>
            <div class="col-sm-6">Kenya</div>
          </div>
          <div class="row bg-map-green mx-0 fs-5 text-left">
            <div class="col-sm-6">Location</div>
            <div class="col-sm-6">Nairobi</div>
          </div>
          <div class="row mx-0">
            <div id="demo" class="carousel slide w-100" data-ride="carousel">
              <!-- Indicators -->

              <!-- The slideshow -->
              <div class="carousel-inner">
                <div class="carousel-item active">
                  <img src="./assets/img/plane.png" alt="Los Angeles" />
                </div>
                <div class="carousel-item">
                  <img src="./assets/img/plane.png" alt="Chicago" />
                </div>
                <div class="carousel-item">
                  <img src="./assets/img/plane.png" alt="New York" />
                </div>
              </div>

              <!-- Left and right controls -->
              <a class="carousel-prev-control" href="#demo" data-slide="prev">
                <span class="carousel-control-prev-icon"></span>
              </a>
              <a class="carousel-next-control" href="#demo" data-slide="next">
                <span class="carousel-control-next-icon"></span>
              </a>
            </div>
          </div>

          <div class="row mx-0">
            <div id="accordion" class="w-100 accordion">
              <div class="card bg-map-dark">
                <div class="card-header">
                  <a
                    class="card-link text-white"
                    data-toggle="collapse"
                    href="#collapseOne"
                  >
                    Green Boxes
                  </a>
                </div>
                <div
                  id="collapseOne"
                  class="collapse show"
                  data-parent="#accordion"
                >
                  <div class="card-body"></div>
                </div>
              </div>
              <div class="card bg-map-dark">
                <div class="card-header">
                  <a
                    class="collapsed card-link"
                    data-toggle="collapse"
                    href="#collapseTwo"
                  >
                    Solar Pannels
                  </a>
                </div>
                <div id="collapseTwo" class="collapse" data-parent="#accordion">
                  <div class="card-body"></div>
                </div>
              </div>
              <div class="card bg-map-dark">
                <div class="card-header">
                  <a
                    class="collapsed card-link"
                    data-toggle="collapse"
                    href="#collapseThree"
                  >
                    Generators
                  </a>
                </div>
                <div
                  id="collapseThree"
                  class="collapse"
                  data-parent="#accordion"
                >
                  <div class="card-body">Lorem ipsum..</div>
                </div>
              </div>
            </div>
          </div>
          <div class="row mx-0 fs-5 text-left">
            <div class="col-sm-6">Gross Area( m<sup>2</sup> )</div>
            <div class="col-sm-6">Nairobi</div>
          </div>
          <div class="row bg-map-green mx-0 fs-5 text-left">
            <div class="col-sm-6">Number of Staff</div>
            <div class="col-sm-6"></div>
          </div>
          <div class="row mx-0 fs-5 text-left">
            <div class="col-sm-6">Greening the Blue 2023</div>
            <div class="col-sm-6"></div>
          </div>
          <div class="row bg-map-green mx-0 fs-5 text-left">
            <div class="col-sm-6">GreenBoxes</div>
            <div class="col-sm-6"></div>
          </div>
        </div>
      </div>
    </div>
    <div id="footer-text">
      <p class="text-white fs-11px">Airtravel does not include UNHAS flights</p>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <script
      type="text/javascript"
      src="https://cdn.canvasjs.com/jquery.canvasjs.min.js"
    ></script>
    <script type="text/javascript" src="./assets/js/bar_chart.js"></script>
    <script>
      // TO MAKE THE MAP APPEAR YOU MUST
      // ADD YOUR ACCESS TOKEN FROM
      // https://account.mapbox.com

      const ICON_SIZE = 0.5; // the adding layer's icon size
      const ICON_COLOR = ""; // adding layer's icon color
      const ACCESS_TOKEN =
        "pk.eyJ1IjoiYmVhdHJpY2VtYWxvcm5pIiwiYSI6ImNsbjRwNTI0YTAycDMybGxkcGxwN2JiNHEifQ.CfkKzYOLd9aRwQ4dJvSPUg";
      const FLY_ZOOM = 10; // the zoom value when you search and select the office name from the autocomplete
      const INITIAL_ZOOM = 1.5;
      const HOME_POSITION = [16.97314, 7.98974];
      const SECONDS_OF_HOUR = 3600;
      const HOURS_OF_DAY = 24;
      const DAYS_OF_YEAR = 365;
      const SECONDS_OF_YEAR = SECONDS_OF_HOUR * HOURS_OF_DAY * DAYS_OF_YEAR;
      const KWH_UPGRADE_PERIOD = 5000; // mseconds after which the KWH will be updated
      const PLANE_ICON_PATH = "./assets/icons/plane_icon_blue.png";
      var map; // mapboxgl object
      var clickedRouteId = null;

      var curOfficeCode = ""; // currently selected office's code
      var KWHTimer;
      var currentPopup;
      var totalTickets = 0;
      var totalCO2 = 0;
      var totalNetSpend = 0;

      var co2Dom = $("#co2_display_dom");
      var ticketsDom = $("#tickets_display_dom");
      var netSpendDom = $("#net_spend_display_dom");
      var co2ProDom = $("#co2-pro-display-dom");
      //  the information of layers to be added to the mapbox
      const layers = [
        {
          sourceId: "offices",
          layerId: "offices",
          iconId: "offices",
        },
        {
          sourceId: "green-boxes",
          layerId: "green-boxes",
          iconId: "green-boxes",
        },
        {
          sourceId: "greening-blue",
          layerId: "greening-blue",
          iconId: "greening-blue",
        },
        {
          sourceId: "fleet",
          layerId: "fleet",
          iconId: "fleet",
        },
      ];

      const Classes = [
        {
          name: "Business",
          total: 0,
        },
        {
          name: "Economy",
          total: 0,
        },
        {
          name: "Premium Economy",
          total: 0,
        },
        {
          name: "First Class",
          total: 9,
        },
      ];
      // offices data to be displayed on the map
      var GlobeData;
      var classes;
      var routes;
      var topTicketFlights;
      var regularTicketFlights;
      $(document).ready(() => {
        fetch(`assets/data/Airtravel.json`)
          .then((response) => {
            if (!response.ok) {
              throw new Error("HTTP error " + response.status);
            }
            return response.json(); // Parse the JSON data from the response
          })
          .then((data) => {
            GlobeData = data;
            routes = GlobeData["Routes"];
            classes = GlobeData["Classes"];
            const cnt = routes.length;
            for (let i = 0; i < cnt; i++) {
              let one = routes[i];
              const tickets = isNaN(Number(one["Number of tickets"]))
                ? 0
                : Number(one["Number of tickets"]);
              const netSpent = isNaN(Number(one["Sum of NET SPEND"]))
                ? 0
                : Number(one["Sum of NET SPEND"]);
              const co2 = isNaN(Number(one["Sum of TONS_CO2"]))
                ? 0
                : Number(one["Sum of TONS_CO2"]);
              totalTickets += tickets;
              totalCO2 += co2;
              totalNetSpend += netSpent;
              one["route_title"] =
                one["Original City"] + " - " + one["Destination city"];
              one["route_no"] = i;
            }
            init();
            init_rotation();
            const seatTotal = classes[classes.length - 1];
            let businessTotal = 0;
            let economyTotal = 0;
            for (seat of classes) {
              businessTotal += Number(seat["Business/First class"]);
              economyTotal += Number(seat["Economy/premium Economy"]);
            }
            init_chart({
              "Economy/premium Economy": economyTotal,
              "Business/First class": businessTotal,
            });
            init_air_travel_autocomplete(routes);
          })
          .catch((error) => {
            console.error("There was a problem fetching the JSON file:", error);
          });
        var toggleLayerCardDom = $("#toggle-layers-view-card");

        // When user clicks the button on the right sidebar card to toggle view the corresponding layer on the map
        $("#view-toggle-layer-btn").on("click", (e) => {
          let dom = $("#view-toggle-layer-btn");
          let iDom = dom.find("i");
          if (iDom.hasClass("bi-stack")) {
            iDom.removeClass("bi-stack").addClass("bi-chevron-double-right");
            toggleLayerCardDom.removeClass("d-none");
          } else {
            iDom.removeClass("bi-chevron-angle-right").addClass("bi-stack");
            toggleLayerCardDom.addClass("d-none");
          }
          if (!$("#top-flights-view-card").hasClass("d-none"))
            $("#top-flights-view-card").addClass("d-none");
        });

        $("#view-top-flights-card-btn").on("click", () => {
          const topCard = $("#top-flights-view-card");
          const regularCard = $("#regular-flights-view-card");
          topCard.toggleClass("d-none");
          if (!regularCard.hasClass("d-none")) regularCard.addClass("d-none");
          if (topCard.hasClass("d-none")) {
            if (
              map.getLayoutProperty("routes-highlight", "visibility") ==
              "visible"
            ) {
              map.setLayoutProperty("routes", "visibility", "visible");
            }
            if (
              map.getLayoutProperty("plane-icons-highlight", "visibility") ==
              "visible"
            ) {
              map.setLayoutProperty("plane-icons", "visibility", "visible");
            }
          } else {
            if (map.getLayoutProperty("routes", "visibility") == "visible") {
              map.setLayoutProperty(
                "routes-highlight",
                "visibility",
                "visible"
              );
              map.setLayoutProperty("routes", "visibility", "none");
            }
            if (
              map.getLayoutProperty("plane-icons", "visibility") == "visible"
            ) {
              map.setLayoutProperty("plane-icons", "visibility", "none");
              map.setLayoutProperty(
                "plane-icons-highlight",
                "visibility",
                "visible"
              );
            }
          }
          lastingSeconds = 0;
        });

        $("#view-regular-flights-card-btn").on("click", () => {
          const topCard = $("#top-flights-view-card");
          const regularCard = $("#regular-flights-view-card");
          regularCard.toggleClass("d-none");
          if (!topCard.hasClass("d-none")) topCard.addClass("d-none");
          if (regularCard.hasClass("d-none")) {
            if (map.getLayoutProperty("routes", "visibility") == "visible") {
              map.setLayoutProperty(
                "routes-highlight",
                "visibility",
                "visible"
              );
            }
            if (
              map.getLayoutProperty("plane-icons", "visibility") == "visible"
            ) {
              map.setLayoutProperty(
                "plane-icons-highlight",
                "visibility",
                "visible"
              );
            }
          } else {
            if (map.getLayoutProperty("routes", "visibility") == "visible") {
              map.setLayoutProperty("routes-highlight", "visibility", "none");
              map.setLayoutProperty("routes", "visibility", "visible");
            }
            if (
              map.getLayoutProperty("plane-icons", "visibility") == "visible"
            ) {
              map.setLayoutProperty("plane-icons", "visibility", "visible");
              map.setLayoutProperty(
                "plane-icons-highlight",
                "visibility",
                "none"
              );
            }
          }
          lastingSeconds = 0;
        });
      });

      // processes to be done to handle the toggle button click
      function handleClickToggleButton(bShown, layerId, dom) {
        if (bShown) {
          map.setLayoutProperty(layerId, "visibility", "none");
          dom.removeClass("bi-eye").addClass("bi-eye-slash");
          if (layerId == "routes") {
            map.setLayoutProperty(layerId + "-highlight", "visibility", "none");
            map.setLayoutProperty(layerId + "-fill", "visibility", "none");
          } else if (layerId == "plane-icons") {
            map.setLayoutProperty(layerId + "-highlight", "visibility", "none");
          }
        } else {
          map.setLayoutProperty(layerId, "visibility", "visible");
          if (layerId == "routes") {
            map.setLayoutProperty(
              layerId + "-highlight",
              "visibility",
              "visible"
            );
            map.setLayoutProperty(layerId + "-fill", "visibility", "visible");
          } else if (layerId == "plane-icons") {
            map.setLayoutProperty(
              layerId + "-highlight",
              "visibility",
              "visible"
            );
          }
          dom.removeClass("bi-eye-slash").addClass("bi-eye");
        }
      }

      // toggle the no layer of the map when user clicks the toggle button on the right sidepanel
      function toggleViewLayer(event, no) {
        event.preventDefault();
        event.stopPropagation();
        let iDom = event.target;
        let isShown = $(iDom).hasClass("bi-eye");
        switch (no) {
          case 1:
            handleClickToggleButton(isShown, "routes", $(iDom));
            break;
          case 2:
            handleClickToggleButton(isShown, "plane-icons", $(iDom));
            break;
          case 3:
            handleClickToggleButton(isShown, "arrival", $(iDom));
            break;
          case 4:
            handleClickToggleButton(isShown, "departure", $(iDom));
            break;
          default:
            break;
        }
      }

      // insert a layer with a source data and icon image to a map
      function insertLayer(
        mapObj,
        sourceName,
        sourceData,
        layerName,
        iconName,
        iconPath,
        iconAnchor,
        iconColor,
        bDisplay
      ) {
        mapObj.loadImage(iconPath, (error, image) => {
          if (error) throw error;
          mapObj.addImage(iconName, image);
          mapObj.addSource(sourceName, {
            type: "geojson",
            // Use a URL for the value for the `data` property.
            // data: 'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson'
            data: sourceData,
          });

          mapObj.addLayer({
            id: layerName,
            type: "symbol",
            source: sourceName,
            layout: {
              "icon-image": iconName,
              "icon-size": ICON_SIZE,
              "icon-anchor": iconAnchor,
              "icon-allow-overlap": true,
              visibility: bDisplay,
            },
          });
        });
      }

      //  the initialization process
      function init() {
        mapboxgl.accessToken = ACCESS_TOKEN;
        map = new mapboxgl.Map({
          container: "map", // container ID
          // style: "mapbox://styles/mapbox/satellite-streets-v12", // style URL
          // style: "mapbox://styles/mapbox/streets-v12", // style URL
          style: "mapbox://styles/beatricemalorni/clofqr6he005g01qrc93u1uar",
          projection: "globe", // Display the map as a globe, since satellite-v9 defaults to Mercator
          zoom: 2, // starting zoom
          center: [108, 4], // // starting center in [lng, lat]
        });

        let arrivalFeatures = routes.map((one) => {
          if (
            !one ||
            isNaN(Number(one["Lat_src"])) ||
            isNaN(Number(one["Lat_dst"])) ||
            isNaN(Number(one["Long_src"])) ||
            isNaN(Number(one["Long_dst"]))
          ) {
            return;
          }
          if (one)
            return {
              type: "Feature",
              geometry: {
                type: "Point",
                coordinates: [one["Long_src"], one["Lat_src"]],
              },
              properties: {
                ...one,
              },
            };
        });
        arrivalFeatures = arrivalFeatures.filter((one) => one != undefined);
        const arrivalData = {
          type: "FeatureCollection",
          crs: {
            type: "name",
            properties: {
              name: "urn:ogc:def:crs:OGC:1.3:CRS84",
            },
          },
          features: arrivalFeatures,
        };
        let departureFeatures = routes.map((one) => {
          if (!one) {
            console.log(one);
          }
          if (one)
            return {
              type: "Feature",
              geometry: {
                type: "Point",
                coordinates: [one["Long_dst"], one["Lat_dst"]],
              },
              properties: {
                ...one,
              },
            };
        });
        const departureData = {
          type: "FeatureCollection",
          crs: {
            type: "name",
            properties: {
              name: "urn:ogc:def:crs:OGC:1.3:CRS84",
            },
          },
          features: departureFeatures,
        };
        topTicketFlights = routes.filter(
          (one) => one["Number of tickets"] >= 50
        );
        topTicketFlights.sort(
          (prev, next) => next["Number of tickets"] - prev["Number of tickets"]
        );
        regularTicketFlights = routes.filter(
          (one) => one["Number of tickets"] < 50
        );
        regularTicketFlights.sort(
          (prev, next) => next["Number of tickets"] - prev["Number of tickets"]
        );
        displayTopTicketFlights(topTicketFlights, regularTicketFlights);
        map.on("style.load", () => {
          // map.setFog({}); // Set the default atmosphere style
        });

        map.on("load", () => {
          insertLayer(
            map,
            "arrival",
            arrivalData,
            "arrival",
            "arrival",
            "./assets/icons/arrival.png",
            "center",
            "#00FF00",
            "none"
          );
          insertLayer(
            map,
            "departure",
            departureData,
            "departure",
            "departure",
            "./assets/icons/departure.png",
            "center",
            "#00FFFF",
            "none"
          );
          // insertLayer(map,
          //     layers[2]["sourceId"],
          //     greeningBlueData,
          //     layers[2]["layerId"],
          //     layers[2]["iconId"],
          //     './assets/icons/Greenbox2.png',
          //     'bottom-left',
          //     '#0000FF',
          //     false
          // );

          spinGlobe();

          // add the airplane routs layer
          const routeFeatures = routes.map((one, index) => {
            return {
              type: "Feature",
              properties: {
                color: "#FFFFFF",
                no: one["route_no"],
                ...one,
              },
              geometry: {
                type: "LineString",
                coordinates: [
                  [one["Long_src"], one["Lat_src"]],
                  [one["Long_dst"], one["Lat_dst"]],
                ],
              },
            };
          });

          map.addSource("routes", {
            type: "geojson",
            data: {
              type: "FeatureCollection",
              features: routeFeatures,
            },
          });

          map.addLayer({
            id: "routes",
            type: "line",
            source: "routes",
            // 'type': "fill",
            paint: {
              "line-width": 1,
              // // Use a get expression (https://docs.mapbox.comhttps://docs.mapbox.com/style-spec/reference/expressions/#get)
              // // to set the line-color to a feature property value.
              "line-dasharray": [2, 1],
              "line-color": ["get", "color"],
              // 'fill-color': 'orange',
              // 'fill-opacity': 0.5,
              // 'fill-outline-color': 'red'
            },
            layout: {
              visibility: "none",
            },
          });

          map.addLayer({
            id: "routes-fill",
            type: "line",
            source: "routes",
            paint: {
              "line-color": "#03BFFB",
              // "line-width": [
              //   'case',
              //   ['boolean', ['feature-routes', 'click'], false],
              //   0,
              //   5
              // ]
              "line-width": 3,
            },
            layout: {
              visibility: "visible",
            },
            filter: ["==", "no", "-1"],
          });

          map.addLayer({
            id: "routes-highlight",
            type: "line",
            source: "routes",
            paint: {
              "line-color": "#FAEA00",
              "line-width": 1,
              "line-dasharray": [2, 1],
            },
            filter: [">=", "Number of tickets", 50],
            layout: {
              visibility: "none",
            },
          });

          const yellowColor = {
            red: 250,
            green: 235,
            blue: 0,
          };
          const rangeDown =
            topTicketFlights[topTicketFlights.length - 1]["Number of tickets"];
          const rangeTop = topTicketFlights[0]["Number of tickets"];
          // add the plane icon layer
          const planeIconFeatures = routes.map((one, index) => {
            const long_src = isNaN(Number(one["Long_src"]))
              ? 0
              : Number(one["Long_src"]);
            const long_dst = isNaN(Number(one["Long_dst"]))
              ? 0
              : Number(one["Long_dst"]);
            const lat_src = isNaN(Number(one["Lat_src"]))
              ? 0
              : Number(one["Lat_src"]);
            const lat_dst = isNaN(Number(one["Lat_dst"]))
              ? 0
              : Number(one["Lat_dst"]);
            const pro =
              one["Number of tickets"] - rangeDown > 0
                ? (one["Number of tickets"] - rangeDown) /
                  (rangeTop - rangeDown)
                : 0;
            const criteria1Dom = $("#level_1_criteria_display_dom");
            const criteria2Dom = $("#level_2_criteria_display_dom");
            const criteria3Dom = $("#level_3_criteria_display_dom");
            const criteria1 = Math.ceil(
              rangeDown + ((rangeTop - rangeDown) * 2) / 3
            );
            const criteria2 = Math.ceil(
              rangeDown + ((rangeTop - rangeDown) * 1) / 3
            );
            criteria1Dom.html(" >= " + criteria1);
            criteria2Dom.html(" >= " + criteria2);
            criteria3Dom.html(" < " + criteria2);

            const newColor = changeSaturation(yellowColor, pro);
            if (pro > 1 / 3 && pro < 2 / 3) {
              console.log("Pro :" + pro + ", newColor: " + newColor);
              console.log(
                one["Original City"] + " --- " + one["Destination city"]
              );
            }
            return {
              type: "Feature",
              properties: {
                ...one,
                color: "#faeb00",
              },
              geometry: {
                type: "Point",
                coordinates: [
                  (long_src + long_dst) / 2,
                  (lat_src + lat_dst) / 2,
                ],
              },
            };
          });

          const planeIconData = {
            type: "FeatureCollection",
            crs: {
              type: "name",
              properties: {
                name: "urn:ogc:def:crs:OGC:1.3:CRS84",
              },
            },
            features: planeIconFeatures,
          };
          map.loadImage(PLANE_ICON_PATH, (error, image) => {
            if (error) throw error;

            map.addImage("plane-icon", image, {
              sdf: true,
            });

            map.addSource("plane-icons", {
              type: "geojson",
              data: planeIconData,
            });

            map.addLayer({
              id: "plane-icons",
              type: "symbol",
              source: "plane-icons",
              // 'type': "fill",
              paint: {
                "icon-color": "#0EB1FF",
                // "icon-color": "#d4cb36",
              },
              layout: {
                "icon-image": "plane-icon",
                "icon-size": ICON_SIZE,
                // 'icon-anchor': 'top',
                "icon-allow-overlap": true,
                visibility: "visible",
              },
            });

            map.addLayer({
              id: "plane-icons-highlight",
              type: "symbol",
              source: "plane-icons",
              // 'type': "fill",
              paint: {
                // "icon-color": "#6c6832",
                "icon-color": ["get", "color"],
              },
              layout: {
                "icon-image": "plane-icon",
                "icon-size": ICON_SIZE,
                // 'icon-anchor': 'top-right',
                "icon-allow-overlap": true,
                visibility: "visible",
              },
              filter: [">=", "Number of tickets", 50],
            });
          });
        });

        map.on("click", (event) => {
          console.log(event);
          const point = event.point;
          const features = map.queryRenderedFeatures(
            [
              [point.x - 5, point.y - 5],
              [point.x + 10, point.y + 10],
            ],
            {
              layers: [
                "routes",
                "routes-highlight",
                "plane-icons",
                "plane-icons-highlight",
                "routes-fill",
              ],
            }
          );
          console.log(features);
          if (!features.length) {
            map.setFilter("routes-fill", ["==", "no", "-1"]);
            return;
          }

          addPopup(features[0].layer.id, features[0].properties, event.lngLat);
          if (
            features[0].layer.id == "routes" ||
            features[0].layer.id == "routes-highlight"
          ) {
            map.setFilter("routes-fill", [
              "==",
              "no",
              features[0].properties["no"],
            ]);
          }
          changeDisplayData(features[0].properties);
        });

        map.flyTo({
          essential: true, // this animation is considered essential with respect to prefers-reduced-motion
          zoom: INITIAL_ZOOM,
        });

        displayTotalValues();
      }

      // handle the zoomin button click
      function doZoomIn() {
        map.zoomIn();
      }

      // handle the zoomout button click
      function doZoomOut() {
        map.zoomOut();
      }

      function flyHome() {
        if (currentPopup) currentPopup.remove();
        spinEnabled = true;
        map.flyTo({
          center: HOME_POSITION,
          essential: true, // this animation is considered essential with respect to prefers-reduced-motion
          zoom: INITIAL_ZOOM,
        });
        $("#view-route-search-input").val("");
        if (!$("#toggle-layers-view-card").hasClass("d-none"))
          $("#view-toggle-layer-btn").click();
        if (!$("#top-flights-view-card").hasClass("d-none"))
          $("#view-top-flights-card-btn").click();
        $("#ui-id-1").hide();
        displayTotalValues();
        initViewLayers();
        init_chart(classes[classes.length - 1]);
        // $("#btn-spin").click();
      }

      function addPopup(layerId, pointFeature, clickedPosition) {
        let popupHtml = ``;
        // const nFlights = isNaN(Number(pointFeature["Total KWH"])) ? "" : parseFloat(pointFeature["Total KWH"]).toLocaleString();
        const arrival = pointFeature["Destination city"];
        const departure = pointFeature["Original City"];
        const co2 = isNaN(Number(pointFeature["Sum of TONS_CO2"]))
          ? " 0 "
          : convertNumbersToFixed(
              Number(pointFeature["Sum of TONS_CO2"]).toLocaleString(),
              2
            );
        const netSpent = isNaN(Number(pointFeature["Sum of NET SPEND"]))
          ? " 0 "
          : convertNumbersToFixed(
              Number(pointFeature["Sum of NET SPEND"]).toLocaleString(),
              2
            );
        let contentDomStr = "";
        // if(layerId == "routes")   contentDomStr = `<div class="card" style="border-radius:unset !important"><div class="card-header bg-popup-cyan p-2 pl-3" style="border-radius:unset !important"><a class="card-link text-white d-flex justify-content-between" data-toggle="collapse" href="#collapseGreenBoxes">Route<i class="bi bi-chevron-down fs-4"></i></a></div><div id="collapseGreenBoxes" class="collapse" data-parent="#accordion"><div class="card-body p-0"><div class="row bg-popup-grey mx-0 text-left"><div class="col-sm-6">CO<sub>2</sub> emitted (tonnes)</div><div class="col-sm-6">${co2}</div></div></div></div></div>`;
        /*else if(layerId == "plane-icons") */ contentDomStr = `<div class="card" style="border-radius:unset !important"><div class="card-header bg-popup-cyan p-2 pl-3" style="border-radius:unset !important"><a class="card-link text-white d-flex justify-content-between">Flight<i class="bi bi-chevron-down fs-4"></i></a></div><div id="collapseGreenBoxes"><div class="card-body p-0"><div class="row bg-popup-grey mx-0 text-left"><div class="col-sm-6"> Departure </div><div class="col-sm-6">${departure}</div></div><div class="row bg-popup-blue mx-0 text-left"><div class="col-sm-6"> Arrival </div><div class="col-sm-6">${arrival}</div></div><div class="row bg-popup-grey mx-0 text-left"><div class="col-sm-6">CO<sub>2</sub> emitted (tonnes) </div><div class="col-sm-6">${co2}</div></div><div class="row bg-popup-blue mx-0 text-left"><div class="col-sm-6">Net Spent (USD)</div><div class="col-sm-6">${netSpent}</div></div></div></div></div>`;
        popupHtml = `<div class="card bg-map-dark" style="width: 250px;"><div class="card-header pb-0 border-0"><p class="fs-5 mb-2"><strong> Flight </strong></p></div><div class="card-body text-center p-0"><div class="row mx-0 p-0"><div id="demo" class="carousel slide w-100" data-ride="carousel"  ><!-- Indicators --><!-- The slideshow --><div class="carousel-inner"><div class="carousel-item active"><img src="./assets/img/plane.png" alt="Los Angeles" style="max-height:200px;width:100%;object-fit:cover;"></div></div><!-- Left and right controls --><a class="carousel-prev-control d-none" href="#demo" data-slide="prev"><span class="carousel-control-prev-icon"></span></a><a class="carousel-next-control d-none" href="#demo" data-slide="next"><span class="carousel-control-next-icon"></span></a></div></div>${contentDomStr}</div></div>`;

        // if(feature.layer.id == 'offices') popupHtml = `<div class="card bg-map-dark" style="width: 300px;"><div class="card-header pb-0 border-0"><strong>UNHCR Office</strong><p class="mb-0" style="color: yellow;"></p></div><div class="card-body text-center p-0"><div class="row bg-map-green mx-0 fs-5 text-left"><div class="col-sm-8">Location</div><div class="col-sm-4">${feature.properties["Location Name"]}</div></div><div class="row mx-0 fs-5 text-left"><div class="col-sm-8">Office Type</div><div class="col-sm-4">${feature.properties["Office Type"]}</div></div><div class="row bg-map-green mx-0 fs-5 text-left"><div class="col-sm-8">Country</div><div class="col-sm-4">${feature.properties["Country Name"]}</div></div><div class="row mx-0 p-0"><div id="demo" class="carousel slide w-100" data-ride="carousel"  ><!-- Indicators --><!-- The slideshow --><div class="carousel-inner"><div class="carousel-item active"><img src="./assets/img/img_snow.jpg" alt="Los Angeles" style="max-height:200px;width:100%;object-fit:cover;"></div><div class="carousel-item"><img src="./assets/img/img_forest.jpg" alt="Chicago" style="max-height:200px;width:100%;object-fit:cover;"></div><div class="carousel-item"><img src="./assets/img/img_lights.jpg" alt="New York" style="max-height:200px;width:100%;object-fit:cover;"></div></div><!-- Left and right controls --><a class="carousel-prev-control" href="#demo" data-slide="prev"><span class="carousel-control-prev-icon"></span></a><a class="carousel-next-control" href="#demo" data-slide="next"><span class="carousel-control-next-icon"></span></a></div></div><div class="row bg-popup-blue mx-0 fs-5 text-left"><div class="col-sm-8">Gross Area( m<sup>2</sup> )</div><div class="col-sm-4">${Number(feature.properties["Gross Area (m2)"]).toLocaleString()}</div></div><div class="row bg-popup-grey mx-0 fs-5 text-left"><div class="col-sm-8">Number of Staff</div><div class="col-sm-4">${feature.properties["Number of staff"]}</div></div><div class="row bg-popup-blue mx-0 fs-5 text-left"><div class="col-sm-8">Greening the Blue 2023</div><div class="col-sm-4">${feature.properties["Greening the Blue 2023"]}</div></div><div class="row bg-popup-grey mx-0 fs-5 text-left"><div class="col-sm-8">GreenBoxes</div><div class="col-sm-4">${feature.properties["Greenboxes"]}</div></div></div></div>`;
        // else if(feature.layer.id == 'green-boxes') popupHtml = `<div class="card bg-map-dark" style="width: 300px;"><div class="card-header pb-0 border-0"><strong>UNHCR Office</strong><p class="mb-0" style="color: yellow;"></p></div><div class="card-body text-center p-0"><div class="row bg-map-green mx-0 fs-5 text-left"><div class="col-sm-6">Location</div><div class="col-sm-6">${feature.properties["Location Name"]}</div></div><div class="row mx-0 p-0"><div id="demo" class="carousel slide w-100" data-ride="carousel"><!-- Indicators --><!-- The slideshow --><div class="carousel-inner"><div class="carousel-item active"><img src="./assets/img/img_snow.jpg" style="max-height:200px;width:100%;object-fit:cover;" alt="Los Angeles"></div><div class="carousel-item"><img src="./assets/img/img_forest.jpg" alt="Chicago" style="max-height:200px;width:100%;object-fit:cover;"></div><div class="carousel-item"><img src="./assets/img/img_lights.jpg" alt="New York" style="max-height:200px;width:100%;object-fit:cover;"></div></div><!-- Left and right controls --><a class="carousel-prev-control" href="#demo" data-slide="prev"><span class="carousel-control-prev-icon"></span></a><a class="carousel-next-control" href="#demo" data-slide="next"><span class="carousel-control-next-icon"></span></a></div></div><div class="row bg-popup-grey mx-0 fs-5 text-left"><div class="col-sm-6">Total KWh in 2022</div><div class="col-sm-6">${parseFloat(feature.properties["Total KWH"]).toLocaleString()}</div></div><div class="row bg-popup-blue mx-0 px-3 fs-5 text-left"><div class="col-sm-6">Country</div><div class="col-sm-6">${feature.properties["Country Name"]}</div></div></div></div>`;
        // else if(feature.layer.id == "greening-blue") popupHtml = `<div class="card bg-map-dark" style="width: 300px;"><div class="card-header pb-0 border-0"><strong>UNHCR Office</strong><p class="mb-0" style="color: yellow;"></p></div><div class="card-body text-center p-0"><div class="row bg-map-green mx-0 fs-5 text-left"><div class="col-sm-7">Location</div><div class="col-sm-5">${feature.properties["Location Name"]}</div></div><div class="row mx-0 p-0"><div id="demo" class="carousel slide w-100" data-ride="carousel"><!-- Indicators --><!-- The slideshow --><div class="carousel-inner"><div class="carousel-item active"><img src="./assets/img/img_snow.jpg" alt="Los Angeles" style="max-height:200px;width:100%;object-fit:cover;"></div><div class="carousel-item"><img src="./assets/img/img_forest.jpg" alt="Chicago" style="max-height:200px;width:100%;object-fit:cover;"></div><div class="carousel-item"><img src="./assets/img/img_lights.jpg" style="max-height:200px;width:100%;object-fit:cover;" alt="New York"  style="max-height:200px;width:100%;object-fit:cover;"></div></div><!-- Left and right controls --><a class="carousel-prev-control" href="#demo" data-slide="prev"><span class="carousel-control-prev-icon"></span></a><a class="carousel-next-control" href="#demo" data-slide="next"><span class="carousel-control-next-icon"></span></a></div></div><div class="row bg-popup-grey mx-0 fs-5 text-left"><div class="col-sm-7">Total CO<sub>2</sub>(tons)</div><div class="col-sm-5">${parseFloat(feature.properties["Total CO2 (tons)"]).toLocaleString()}</div></div><div class="row bg-popup-blue mx-0 fs-5 text-left"><div class="col-sm-7">Waste generated(Kg)</div><div class="col-sm-5">${Number(feature.properties["Waste generated KG"]).toLocaleString()}</div></div><div class="row bg-popup-grey mx-0 fs-5 text-left"><div class="col-sm-7">Water Used(m<sub>3</sub>)</div><div class="col-sm-5">${Number(feature.properties["Water used (m3)"]).toLocaleString()}</div></div><div class="row bg-popup-blue mx-0 fs-5 text-left"><div class="col-sm-7">Water recycled(m<sub>3</sub>)</div><div class="col-sm-5">${feature.properties["Water recycled (m3)"]}</div></div></div></div>`;

        currentPopup = new mapboxgl.Popup()
          .setLngLat([clickedPosition.lng, clickedPosition.lat])
          .setHTML(popupHtml)
          .addTo(map);
      }

      function displayTotalValues() {
        co2Dom.html(convertNumbersToFixed(totalCO2, 2).toLocaleString());
        ticketsDom.html(
          convertNumbersToFixed(totalTickets, 2).toLocaleString()
        );
        netSpendDom.html(
          convertNumbersToFixed(totalNetSpend, 2).toLocaleString()
        );
        co2ProDom.html(Number("100").toLocaleString());
      }

      function changeDisplayData(prop) {
        let co2 = prop["Sum of TONS_CO2"];
        co2 = isNaN(Number(co2)) ? 0 : Number(co2);
        let tickets = prop["Number of tickets"];
        tickets = isNaN(Number(tickets)) ? 0 : Number(tickets);
        let netSpend = prop["Sum of NET SPEND"];
        netSpend = isNaN(Number(netSpend)) ? 0 : Number(netSpend);
        co2Dom.html(convertNumbersToFixed(co2, 2).toLocaleString());
        ticketsDom.html(convertNumbersToFixed(tickets, 2).toLocaleString());
        netSpendDom.html(convertNumbersToFixed(netSpend, 2).toLocaleString());
        co2ProDom.html(
          convertNumbersToFixed(
            Number((co2 * 100) / totalCO2),
            2
          ).toLocaleString()
        );
        let seatData = classes.filter(
          (one) =>
            (String(one["Original City"]).trim() ==
              prop["Original City"].trim()) &
            (String(one["Destination city"]).trim() ==
              prop["Destination city"].trim())
        );
        if (!seatData || seatData.length == 0) return;
        init_chart(seatData[0]);
      }

      function initViewLayers() {
        if ($("#toggle-routes-btn i").hasClass("bi-eye")) {
          $("#toggle-routes-btn i").click();
        }
        if ($("#toggle-flights-btn i").hasClass("bi-eye-slash")) {
          $("#toggle-flights-btn i").click();
        }
        if ($("#toggle-arrival-btn i").hasClass("bi-eye")) {
          $("#toggle-arrival-btn i").click();
        }
        if ($("#toggle-departure-btn i").hasClass("bi-eye")) {
          $("#toggle-departure-btn i").click();
        }
      }

      function displayTopTicketFlights(top, regular) {
        const topDom = $("#top-flights-view-card tbody");
        let domStr = "";
        for (const one of top) {
          domStr += `<tr><td>${one["Original City"]}</td><td>${
            one["Destination city"]
          }</td><td>${one["Number of tickets"].toLocaleString()}</td></tr>`;
        }
        topDom.append(domStr);
        domStr = "";
        const regularDom = $("#regular-flights-view-card tbody");
        for (const one of regular) {
          domStr += `<tr><td>${one["Original City"]}</td><td>${
            one["Destination city"]
          }</td><td>${one["Number of tickets"].toLocaleString()}</td></tr>`;
        }
        regularDom.append(domStr);
      }

      function changeSaturation(rgbColor, saturationChange) {
        let r = rgbColor.red;
        let g = rgbColor.green;
        let b = rgbColor.blue;

        const hex1 = "#d4cb36";
        const hex2 = "#999334";
        const hex3 = "#6c6832";

        if (saturationChange > 2 / 3) return hex1;
        else if (saturationChange > 1 / 3) return hex2;
        else if (saturationChange <= 1 / 3) return hex3;
      }
    </script>
    <script src="./assets/js/rotation.js"></script>
    <script src="./assets/js/init_autocomplete.js"></script>
    <script src="./assets/js/common.js"></script>
  </body>
</html>
