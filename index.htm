<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>The Globe</title>
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <link rel="shortcut icon" href="assets/icons/exb.ico" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css"
    />
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.min.css"
    />
    <link
      rel="stylesheet"
      href="https://icons.getbootstrap.com/assets/font/bootstrap-icons.min.css"
    />
    <link href="./assets/css/index.css" rel="stylesheet" />
    <link href="./assets/css/common.css" rel="stylesheet" />
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>

    <style>
      body {
        margin: 0;
        padding: 0;
      }
      #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <div id="toggle-layer-button-wrapper-div">
      <div class="position-relative">
        <div class="text-white text-right">
          <a
            id="view-toggle-layer-btn"
            class="btn btn-black bg-map-dark border-radius-0 mx-1 d-none justify-content-center align-items-center"
            ><i class="bi bi-chevron-double-right bi-stack"></i
          ></a>
          <a
            class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center my-2"
            onclick="flyHome()"
            ><i class="bi bi-house-door"></i
          ></a>
        </div>
        <div
          id="toggle-layers-view-card"
          class="card bg-map-dark border-0 toggle-layer-accordion-wrapper-card d-none"
          style="
            border-radius: 0;
            position: absolute;
            right: 50px;
            top: 0;
            min-width: 300px;
          "
        >
          <div class="card-body p-2 border-radius-0 fs-6-5">
            <div
              id="toggle-layer-accordion"
              class="border-radius-0 accordion w-100 border-0"
            >
              <!-- <div class="card bg-black mb-1 pb-2">
                    <div class="card-header pb-3">
                      <a class="card-link text-white" id="toggle-fleet-btn" data-toggle="collapse" href="#accordion-fleet">
                        <i class="bi bi-eye-slash px-2" onclick="toggleViewLayer(event, 3)"></i>Fleet
                        <i class="bi bi-filter-square-fill accordion-card-header-icon"></i>
                      </a>

                    </div>
                    <div id="accordion-fleet" class="collapse show" data-parent="#toggle-layer-accordion">
                      <div class="card-body bg-map-dark border-0 pt-1">
                        <img src="./assets/icons/blue_pointer.png" width="25px" height="25px" />
                      </div>
                    </div>
                  </div> -->
              <div class="card bg-black mb-1 pb-2">
                <div class="card-header pb-3">
                  <a
                    class="collapsed card-link text-white"
                    id="toggle-greening-btn"
                    data-toggle="collapse"
                    href="#accordion-greening-the-blue"
                  >
                    <i
                      class="bi bi-eye-slash px-2"
                      onclick="toggleViewLayer(event, 2)"
                    ></i
                    >Greening The Blue 2023
                    <i
                      class="bi bi-filter-square-fill accordion-card-header-icon"
                    ></i>
                  </a>
                </div>
                <div
                  id="accordion-greening-the-blue"
                  class="collapse"
                  data-parent="#toggle-layer-accordion"
                >
                  <div class="card-body bg-map-dark border-0 pt-1">
                    <img
                      src="./assets/icons/Greenbox.png"
                      width="20px"
                      height="20px"
                    />
                  </div>
                </div>
              </div>
              <div class="card bg-black mb-1 pb-2">
                <div class="card-header pb-3">
                  <a
                    class="collapsed card-link text-white"
                    id="toggle-boxes-btn"
                    data-toggle="collapse"
                    href="#green-boxes-accordion-part"
                  >
                    <i
                      class="bi bi-eye-slash px-2"
                      onclick="toggleViewLayer(event, 1)"
                    ></i
                    >Green Boxes
                    <i
                      class="bi bi-filter-square-fill accordion-card-header-icon"
                    ></i>
                  </a>
                </div>
                <div
                  id="green-boxes-accordion-part"
                  class="collapse"
                  data-parent="#accordion"
                >
                  <div class="card-body bg-map-dark pt-1 pb-3 border-0">
                    <div class="d-flex">
                      <img
                        src="./assets/icons/Greenbox.png"
                        width="20px"
                        height="20px"
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div class="card bg-black pb-2">
                <div class="card-header pb-3">
                  <a
                    class="collapsed card-link text-white"
                    id="toggle-offices-btn"
                    data-toggle="collapse"
                    href="#unhcr-offices-accordion-part"
                  >
                    <i
                      class="bi bi-eye px-2"
                      onclick="toggleViewLayer(event, 0)"
                    ></i
                    >UNHCR Offices
                    <i
                      class="bi bi-filter-square-fill accordion-card-header-icon"
                    ></i>
                  </a>
                </div>
                <div
                  id="unhcr-offices-accordion-part"
                  class="collapse"
                  data-parent="#accordion"
                >
                  <div class="card-body bg-map-dark border-0 pt-0 pb-3">
                    <div class="d-flex">
                      <img
                        src="./assets/icons/blue_pointer.png"
                        width="25px"
                        height="25px"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="view-place-input-wrapper-div">
      <div class="position-relative">
        <input
          type="text"
          id="view-office-search-input"
          class=""
          placeholder="UNHCR offices"
          name="search2"
        />
        <input type="hidden" id="autocomplete-select-id" />
        <a
          class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center"
          type="submit"
          ><i class="bi bi-search"></i
        ></a>
      </div>
    </div>
    <div id="top-left-buttons-wrapper-div">
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center my-0-5 map-control-btn"
        onclick="doZoomIn()"
      >
        <img src="./assets/icons/plus.png" class="img-fluid" />
      </button>
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center mb-2 map-control-btn"
        onclick="doZoomOut()"
      >
        <i class="bi bi-dash-lg fs-4"></i>
      </button>
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 justify-content-center align-items-center my-0-5 d-none"
      >
        <i class="bi bi-arrows-move"></i>
      </button>
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 justify-content-center align-items-center mb-2 d-none"
      >
        <i class="bi bi-arrow-clockwise"></i>
      </button>
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 justify-content-center align-items-center mb-3 d-none"
        style="border-radius: 50%"
      >
        <i class="bi bi-plus"></i>
      </button>
      <button
        id="btn-spin"
        class="btn btn-transparent border-radius-0 d-none justify-content-center align-items-center"
      >
        <i class="bi bi-play text-white" style="font-size: 2.75rem"></i>
      </button>
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center mt-2 map-control-btn"
        id="view-top-emission-offices-card-btn"
      >
        <i class="bi bi-building"></i>
      </button>
      <button
        class="btn btn-black bg-map-dark border-radius-0 mx-1 d-flex justify-content-center align-items-center my-0-5 map-control-btn"
        id="view-regular-emission-offices-card-btn"
      >
        <i class="bi bi-building"></i>
      </button>
    </div>
    <div id="bottom-left-buttons-wrapper-div" class="">
      <a
        href="airtravel.htm"
        class="btn btn-outline-blue d-flex align-items-center my-1 w-100 p-0 active"
        target="_self"
        ><i class="bi bi-link-45deg fs-4 mx-2"></i>Air Travel</a
      >
      <a
        href="fleet.htm"
        class="btn btn-outline-blue d-flex align-items-center my-1 w-100 active p-0"
        target="_self"
        ><i class="bi bi-link-45deg fs-4 mx-2"></i>Fleet
      </a>

      <a
        href="our-team.htm"
        class="btn btn-outline-blue d-flex align-items-center my-1 w-100 p-0"
        target="_self"
        ><i class="bi bi-link-45deg fs-4 mx-2"></i>Meet the team</a
      >
      <a
        href="qrcode.htm"
        class="btn btn-outline-blue d-flex align-items-center my-1 w-100 p-0"
        target="_self"
        ><i class="bi bi-link-45deg fs-4 mx-2"></i> ... Much More
      </a>
    </div>
    <div id="footer-text">
      <p class="text-white fs-11px">
        Data Source: Greening the Blue 2023 report
      </p>
    </div>
    <div id="left-title">
      <span class="text-white fs-2 fw-600"
        >UNHCR offices' Environmental Footprint</span
      >
    </div>
    <div id="right-title">
      <img class="img-fluid" src="./assets/img/UNHCR Logo white.png" />
    </div>
    <div
      id="top-emission-offices-view-card"
      class="card bg-map-dark border-0 toggle-layer-accordion-wrapper-card d-none"
    >
      <div
        class="card-header p-2 d-flex justify-content-center align-items-center"
        style="background-color: #303030"
      >
        <h6 class="mb-0 text-center" style="color: #faeb00">
          20 Offices with the most CO2 emissions
        </h6>
      </div>
      <div class="card-body p-1 border-radius-0 fs-6-5 bg-white">
        <div class="container tableFixHead px-1">
          <table class="table">
            <thead>
              <th width="30%">Location</th>
              <th>CO2 Tons (office only)</th>
            </thead>
            <tbody></tbody>
          </table>
        </div>
        <div class="row d-none">
          <div class="col">
            <img src="./assets/icons/plane_icon_level1.png" width="20px" /><span
              id="level_1_criteria_display_dom"
              class="criteria"
            ></span>
          </div>
          <div class="col">
            <img src="./assets/icons/plane_icon_level2.png" width="20px" /><span
              id="level_2_criteria_display_dom"
              class="criteria"
            ></span>
          </div>
          <div class="col">
            <img src="./assets/icons/plane_icon_level3.png" width="20px" /><span
              id="level_3_criteria_display_dom"
              class="criteria"
            ></span>
          </div>
        </div>
      </div>
    </div>
    <div
      id="regular-emission-offices-view-card"
      class="card bg-map-dark border-0 toggle-layer-accordion-wrapper-card d-none"
    >
      <div
        class="card-header p-2 d-flex justify-content-center align-items-center"
        style="background-color: white"
      >
        <h5 class="mb-0" style="color: #18375f">Other Offices</h5>
      </div>
      <div class="card-body p-1 border-radius-0 fs-6-5 bg-white text-primary">
        <div class="container tableFixHead px-1">
          <table class="table">
            <thead>
              <th width="30%">Location</th>
              <th>CO2 Tons (office only)</th>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
    </div>
    <div id="right-panel" class="" style="border-left: 2px solid white">
      <div class="mx-0" id="right-inner-panel">
        <div id="totalPowerDiv">
          <p class="text-white text-center fw-600 fs-16px mt-2">
            Estimated Power Consumption and tons of CO<sub>2</sub> Emissions
          </p>
          <div class="row bold w-100 mx-0">
            <div class="col-md-3 col-sm-6 p-0">
              <img
                src="./assets/icons/power c.png"
                class="img-fluid panel-image"
              />
            </div>
            <div class="col-md-9 col-sm-6">
              <span
                class="d-flex align-items-center justify-content-center h-100 fs-5"
                ><strong id="KWH-display-dom" class="mx-2"> 0 &nbsp; </strong>
                <strong>KWh</strong></span
              >
            </div>
          </div>
          <div class="row bold w-100 mx-0 my-2">
            <div class="col-md-3 col-sm-6 p-0">
              <img src="./assets/icons/CO2.png" class="img-fluid panel-image" />
            </div>
            <div class="col-md-9 col-sm-6">
              <p class="d-flex justify-content-center fs-5 mb-0">
                <strong id="offices-co2-display-dom" class="mx-2">
                  0 &nbsp;
                </strong>
              </p>
              <strong class="fs-6 mb-0"
                >Tons of CO<sub>2</sub> Emissions</strong
              >
            </div>
          </div>
          <p class="fs-10px w-100">2023 year to date</p>
          <p class="fs-9px mx-3">
            Estimated Power Consumption based on 2022's greenbox readings
          </p>
        </div>
        <div id="blueStats">
          <p class="w-100 fs-16px fw-600">Greening The Blue 2023</p>
          <div class="row w-100">
            <div class="col-md-3 col-sm-6 p-1">
              <img src="./assets/icons/CO2.png" class="img-fluid panel-image" />
            </div>
            <div class="col-md-9 col-sm-6">
              <h6><strong id="co2_display_dom"> 0 </strong></h6>
              <p class="fs-13px">Tons of CO<sub>2</sub> emitted</p>
            </div>
          </div>
          <div class="row w-100">
            <div class="col-md-3 col-sm-6 p-1">
              <img
                src="./assets/icons/water.png"
                class="img-fluid panel-image"
              />
            </div>
            <div class="col-md-9 col-sm-6">
              <h6><strong id="used_water_display_dom"> 0 </strong></h6>
              <p class="fs-13px">m<sub>3</sub> of water used</p>
            </div>
          </div>
          <div class="row w-100">
            <div class="col-md-3 col-sm-6 p-1">
              <img
                src="./assets/icons/waste.png"
                class="img-fluid panel-image"
              />
            </div>
            <div class="col-md-9 col-sm-6">
              <h6><strong id="generated_waste_display_dom"> 0 </strong></h6>
              <p class="fs-13px">Kg of waste generated</p>
            </div>
          </div>
          <div class="w-100 mx-2"></div>
        </div>
        <!-- <div id="status-view-panel" class="text-white text-center px-3 py-3 position-relative w-100 h-100">
            <hr class="w-100 my-4" style="border-top:2px solid white;">
            <p class="text-white text-center fw-600 fs-16px py-2">Estimated Offices Power Consumption</p>
            <div class="row bold w-100 px-3 my-3">
              <div class="col-sm-4">
                <img src="./assets/icons/power c.png" class="img-fluid" />
              </div>
              <div class="col-sm-8">
                <span class="d-flex align-items-center h-100"><strong id="KWH-display-dom" class="mx-2"> 0 &nbsp; </strong> <strong>KWh</strong></span>
              </div>  
            </div>
            <p class="fs-10px mt-4 w-100">2023 year to date</p>
            <p class="fs-9px mx-5 my-1">Estimated Offices Power Consumption based on 2023's greenhouse' readings</p>
            <hr class="w-100 mt-4 mb-5" style="border-top:2px solid white;">
            <p class="w-100 fs-16px fw-600 mb-5 mt-10">Greening The Blue 2023 </p>
            <div class="w-100 mx-2">
                <div class="row my-5">
                    <div class="col-md-3 col-sm-6">
                        <img src="./assets/icons/CO2.png" class="img-fluid">
                    </div>
                    <div class="col-md-8 col-sm-5">
                        <h6 id="co2_display_dom"> 0 </h6>
                        <p class="fs-13px">(Tons of CO<sub>2</sub> emitted) </p>
                    </div>
                </div>
                <div class="row my-5">
                    <div class="col-md-3 col-sm-6">
                        <img src="./assets/icons/water.png" class="img-fluid" />
                    </div>
                    <div class="col-md-8 col-sm-5">
                        <h6 id="used_water_display_div"> 0 </h6>
                        <p class="fs-13px">(m<sub>3</sub> of water used)</p>
                    </div>
                </div>
                <div class="row my-5">
                    <div class="col-md-3 col-sm-6">
                        <img src="./assets/icons/waste.png" class="img-fluid">
                    </div>
                    <div class="col-md-8 col-sm-5">
                        <h6 id="generated_waste_display_div"> 0 </h6>
                        <p class="fs-13px">(Kg of waste generated)</p>
                    </div>
                </div>
                <div class="row"></div>
            </div>
            <hr class="mt-8 px-4" style="border-top:2px solid white;">
            
        </div> -->
      </div>
    </div>
    <div class="container">
      <div class="card bg-map-dark d-none" style="width: 350px">
        <div class="card-header pb-0 border-0">
          <strong>UNHCR Office</strong>
          <p class="mb-0" style="color: yellow">Nairobi</p>
        </div>
        <div class="card-body text-center px-0">
          <div class="row bg-map-green mx-0 fs-5 text-left">
            <div class="col-sm-6">Office Type</div>
            <div class="col-sm-6">Country Office</div>
          </div>
          <div class="row px-3 fs-5 text-left">
            <div class="col-sm-6">Country</div>
            <div class="col-sm-6">Kenya</div>
          </div>
          <div class="row bg-map-green mx-0 fs-5 text-left">
            <div class="col-sm-6">Location</div>
            <div class="col-sm-6">Nairobi</div>
          </div>
          <div class="row mx-0">
            <div id="demo" class="carousel slide w-100" data-ride="carousel">
              <!-- Indicators -->

              <!-- The slideshow -->
              <div class="carousel-inner">
                <div class="carousel-item active">
                  <img src="./assets/img/plane.png" alt="Los Angeles" />
                </div>
                <div class="carousel-item">
                  <img src="./assets/img/plane.png" alt="Chicago" />
                </div>
                <div class="carousel-item">
                  <img src="./assets/img/plane.png" alt="New York" />
                </div>
              </div>

              <!-- Left and right controls -->
              <a class="carousel-prev-control" href="#demo" data-slide="prev">
                <span class="carousel-control-prev-icon"></span>
              </a>
              <a class="carousel-next-control" href="#demo" data-slide="next">
                <span class="carousel-control-next-icon"></span>
              </a>
            </div>
          </div>

          <div class="row mx-0">
            <div id="accordion" class="w-100 accordion">
              <div class="card bg-map-dark">
                <div class="card-header">
                  <a
                    class="card-link text-white"
                    data-toggle="collapse"
                    href="#collapseOne"
                  >
                    Green Boxes
                  </a>
                </div>
                <div
                  id="collapseOne"
                  class="collapse show"
                  data-parent="#accordion"
                >
                  <div class="card-body"></div>
                </div>
              </div>
              <div class="card bg-map-dark">
                <div class="card-header">
                  <a
                    class="collapsed card-link"
                    data-toggle="collapse"
                    href="#collapseTwo"
                  >
                    Solar Pannels
                  </a>
                </div>
                <div id="collapseTwo" class="collapse" data-parent="#accordion">
                  <div class="card-body"></div>
                </div>
              </div>
              <div class="card bg-map-dark">
                <div class="card-header">
                  <a
                    class="collapsed card-link"
                    data-toggle="collapse"
                    href="#collapseThree"
                  >
                    Generators
                  </a>
                </div>
                <div
                  id="collapseThree"
                  class="collapse"
                  data-parent="#accordion"
                >
                  <div class="card-body">Lorem ipsum..</div>
                </div>
              </div>
            </div>
          </div>
          <div class="row mx-0 fs-5 text-left">
            <div class="col-sm-6">Gross Area( m<sup>2</sup> )</div>
            <div class="col-sm-6">Nairobi</div>
          </div>
          <div class="row bg-map-green mx-0 fs-5 text-left">
            <div class="col-sm-6">Number of Staff</div>
            <div class="col-sm-6"></div>
          </div>
          <div class="row mx-0 fs-5 text-left">
            <div class="col-sm-6">Greening the Blue 2023</div>
            <div class="col-sm-6"></div>
          </div>
          <div class="row bg-map-green mx-0 fs-5 text-left">
            <div class="col-sm-6">GreenBoxes</div>
            <div class="col-sm-6"></div>
          </div>
        </div>
      </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <script>
      // TO MAKE THE MAP APPEAR YOU MUST
      // ADD YOUR ACCESS TOKEN FROM
      // https://account.mapbox.com

      const ICON_SIZE = 0.5; // the adding layer's icon size
      const ICON_COLOR = ""; // adding layer's icon color
      const ACCESS_TOKEN =
        "pk.eyJ1IjoiYmVhdHJpY2VtYWxvcm5pIiwiYSI6ImNsbjRwNTI0YTAycDMybGxkcGxwN2JiNHEifQ.CfkKzYOLd9aRwQ4dJvSPUg";
      const FLY_ZOOM = 10; // the zoom value when you search and select the office name from the autocomplete
      const INITIAL_ZOOM = 1.5;
      const HOME_POSITION = [16.97314, 7.98974];
      const SECONDS_OF_HOUR = 3600;
      const HOURS_OF_DAY = 24;
      const DAYS_OF_YEAR = 365;
      const SECONDS_OF_YEAR = SECONDS_OF_HOUR * HOURS_OF_DAY * DAYS_OF_YEAR;
      const KWH_UPGRADE_PERIOD = 5000; // mseconds after which the KWH will be updated
      var map; // mapboxgl object
      var curOfficeCode = ""; // currently selected office's code
      var KWHTimer;
      var currentPopup;
      var totalKWH = 0;
      var totalCO2 = 0;
      var totalUsedWater = 0;
      var totalRecycledWater = 0;
      var totalWaste = 0;
      var CO2Dom = $("#co2_display_dom");
      var used_water_dom = $("#used_water_display_dom");
      var generated_waste_dom = $("#generated_waste_display_dom");

      //  the information of layers to be added to the mapbox
      const layers = [
        {
          sourceId: "top-emission-offices",
          layerId: "top-emission-offices",
          iconId: "top-emission-offices",
        },
        {
          sourceId: "regular-emission-offices",
          layerId: "regular-emission-offices",
          iconId: "regular-emission-offices",
        },
        {
          sourceId: "greening-blue",
          layerId: "greening-blue",
          iconId: "greening-blue",
        },
        {
          sourceId: "fleet",
          layerId: "fleet",
          iconId: "fleet",
        },
      ];

      // offices data to be displayed on the map
      var GlobeData;
      var locations;
      var fleet;
      $(document).ready(() => {
        fetch(`assets/data/Globe.json`)
          .then((response) => {
            if (!response.ok) {
              throw new Error("HTTP error " + response.status);
            }
            return response.json(); // Parse the JSON data from the response
          })
          .then((data) => {
            GlobeData = data;
            locations = GlobeData["Globe"];
            fleet = GlobeData["Fleet"];

            for (var one of locations) {
              let val = one["Total KWH"];
              if (typeof val != "number") val = Number(val);
              const kwh = val;

              const co2 = one["Total CO2 (tons)"] ? one["Total CO2 (tons)"] : 0;
              // const co2 = isNaN(Number(val.replace(/,/g, ''))) ? 0 : Number(val.replace(/,/g, ''));
              const used_water = one["Water used (m3)"]
                ? one["Water used (m3)"]
                : 0;
              // const used_water = isNaN(Number(val.replace(/,/g, ''))) ? 0 : Number(val.replace(/,/g, ''));
              const recycled_water = one["Water recycled (m3)"]
                ? one["Water recycled (m3)"]
                : 0;
              // const recycled_water = isNaN(Number(val.replace(/,/g, ''))) ? 0 : Number(val.replace(/,/g, ''));
              const waste = one["Waste generated KG"]
                ? one["Waste generated KG"]
                : 0;
              // const waste = isNaN(Number(val.replace(/,/g, ''))) ? 0 : Number(val.replace(/,/g, ''));
              if (one["Office (Building code)"] == "Total") continue;
              totalKWH += kwh;
              totalCO2 += co2;
              totalUsedWater += used_water;
              totalRecycledWater += recycled_water;
              totalWaste += waste;
              if (waste == 111954) console.log("Total Waste is " + totalWaste);
            }
            init();
            initialize_autocomplete();
            init_rotation();
          })
          .catch((error) => {
            console.error("There was a problem fetching the JSON file:", error);
          });
        var toggleLayerCardDom = $("#toggle-layer-button-wrapper-div .card");

        // When user clicks the button on the right sidebar card to toggle view the corresponding layer on the map
        $("#view-toggle-layer-btn").on("click", (e) => {
          let dom = $("#view-toggle-layer-btn");
          let iDom = dom.find("i");
          if (iDom.hasClass("bi-stack")) {
            iDom.removeClass("bi-stack").addClass("bi-chevron-double-right");
            toggleLayerCardDom.removeClass("d-none");
          } else {
            iDom.removeClass("bi-chevron-angle-right").addClass("bi-stack");
            toggleLayerCardDom.addClass("d-none");
          }
          lastingSeconds = 0;
        });

        $("#view-top-emission-offices-card-btn").on("click", () => {
          const topCard = $("#top-emission-offices-view-card");
          const regularCard = $("#regular-emission-offices-view-card");
          topCard.toggleClass("d-none");
          let topVisible, regularVisible;
          if (!topCard.hasClass("d-none")) {
            topVisible = "visible";
            regularVisible = "none";
            regularCard.addClass("d-none");
          } else {
            topVisible = "visible";
            regularVisible = "visible";
          }
          map.setLayoutProperty(
            "top-emission-offices",
            "visibility",
            topVisible
          );
          map.setLayoutProperty(
            "regular-emission-offices",
            "visibility",
            regularVisible
          );

          lastingSeconds = 0;
        });

        $("#view-regular-emission-offices-card-btn").on("click", () => {
          const topCard = $("#top-emission-offices-view-card");
          const regularCard = $("#regular-emission-offices-view-card");
          regularCard.toggleClass("d-none");
          let topVisible, regularVisible;
          if (!regularCard.hasClass("d-none")) {
            topVisible = "none";
            regularVisible = "visible";
            topCard.addClass("d-none");
          } else {
            topVisible = "visible";
            regularVisible = "visible";
          }
          map.setLayoutProperty(
            "top-emission-offices",
            "visibility",
            topVisible
          );
          map.setLayoutProperty(
            "regular-emission-offices",
            "visibility",
            regularVisible
          );

          lastingSeconds = 0;
        });
      });

      // processes to be done to handle the toggle button click
      function handleClickToggleButton(bShown, layerId, dom) {
        if (bShown) {
          if (layerId != "fleet")
            map.setLayoutProperty(layerId, "visibility", "none");
          dom.removeClass("bi-eye").addClass("bi-eye-slash");
        } else {
          if (layerId != "fleet")
            map.setLayoutProperty(layerId, "visibility", "visible");
          dom.removeClass("bi-eye-slash").addClass("bi-eye");
        }
      }

      // toggle the no layer of the map when user clicks the toggle button on the right sidepanel
      function toggleViewLayer(event, no) {
        event.preventDefault();
        event.stopPropagation();
        let iDom = event.target;
        let isShown = $(iDom).hasClass("bi-eye");
        switch (no) {
          case 0:
            handleClickToggleButton(isShown, layers[no]["layerId"], $(iDom));
            break;
          case 1:
            handleClickToggleButton(isShown, layers[no]["layerId"], $(iDom));
            break;
          case 2:
            handleClickToggleButton(isShown, layers[no]["layerId"], $(iDom));
            break;
          case 3:
            handleClickToggleButton(isShown, layers[no]["layerId"], $(iDom));
            break;
          default:
            break;
        }
      }

      // insert a layer with a source data and icon image to a map
      function insertLayer(
        mapObj,
        sourceName,
        sourceData,
        layerName,
        iconName,
        iconPath,
        iconAnchor,
        iconColor,
        bDisplay
      ) {
        mapObj.loadImage(iconPath, (error, image) => {
          if (error) throw error;
          mapObj.addImage(iconName, image);
          mapObj.addSource(sourceName, {
            type: "geojson",
            // Use a URL for the value for the `data` property.
            // data: 'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson'
            data: sourceData,
          });

          const visible = bDisplay ? "visible" : "none";

          mapObj.addLayer({
            id: layerName,
            type: "symbol",
            source: sourceName,
            layout: {
              "icon-image": iconName,
              "icon-size": ICON_SIZE,
              "icon-anchor": iconAnchor,
              "icon-allow-overlap": true,
              visibility: visible,
            },
            paint: {
              "icon-color": ["get", "color"],
            },
          });
        });
      }

      //  the initialization process
      function init() {
        sortedOffices = locations.sort(
          (prev, next) =>
            next["CO2 Tons (office only)"] - prev["CO2 Tons (office only)"]
        );
        criteriaCO2Qnt = sortedOffices[21]["CO2 Tons (office only)"];
        let officeFeatures = locations.map((one) => {
          if (
            !one ||
            isNaN(Number(one["Latitude"])) ||
            isNaN(Number(one["Longitude"]))
          ) {
            return;
          }
          if (one)
            return {
              type: "Feature",
              geometry: {
                type: "Point",
                coordinates: [one["Longitude"], one["Latitude"]],
              },
              properties: {
                ...one,
                color:
                  one["CO2 Tons (office only)"] >= criteriaCO2Qnt
                    ? "#faeb00"
                    : "#007bb6",
              },
            };
        });
        officeFeatures = officeFeatures.filter((one) => one != undefined);
        const officesData = {
          type: "FeatureCollection",
          crs: {
            type: "name",
            properties: {
              name: "urn:ogc:def:crs:OGC:1.3:CRS84",
            },
          },
          features: officeFeatures,
        };
        const greenBoxFeatures = officeFeatures.filter(
          (one) => one.properties["Greenboxes"] == "Yes"
        );
        const greenBoxesData = { ...officesData, features: greenBoxFeatures };

        const greeningBlueFeatures = officeFeatures.filter(
          (one) => one.properties["Greening the Blue 2023"] == "Yes"
        );
        const greeningBlueData = { ...officesData, features: greenBoxFeatures };

        topEmissionOffices = locations.filter(
          (one) => one["CO2 Tons (office only)"] >= criteriaCO2Qnt
        );
        topEmissionOffices.sort(
          (prev, next) =>
            next["CO2 Tons (office only)"] - prev["CO2 Tons (office only)"]
        );
        regularEmissionOffices = locations.filter(
          (one) => one["CO2 Tons (office only)"] < criteriaCO2Qnt
        );
        regularEmissionOffices.sort(
          (prev, next) =>
            next["CO2 Tons (office only)"] - prev["CO2 Tons (office only)"]
        );
        let topOfficesFeatures = topEmissionOffices.map((one) => {
          if (
            !one ||
            isNaN(Number(one["Latitude"])) ||
            isNaN(Number(one["Longitude"]))
          ) {
            return;
          }
          if (one)
            return {
              type: "Feature",
              geometry: {
                type: "Point",
                coordinates: [one["Longitude"], one["Latitude"]],
              },
              properties: {
                ...one,
                color: "#007bb6",
              },
            };
        });
        topOfficesFeatures = topOfficesFeatures.filter(
          (one) => one != undefined
        );
        const topOfficesData = {
          type: "FeatureCollection",
          crs: {
            type: "name",
            properties: {
              name: "urn:ogc:def:crs:OGC:1.3:CRS84",
            },
          },
          features: topOfficesFeatures,
        };
        let regularOfficesFeatures = regularEmissionOffices.map((one) => {
          if (
            !one ||
            isNaN(Number(one["Latitude"])) ||
            isNaN(Number(one["Longitude"]))
          ) {
            return;
          }
          if (one)
            return {
              type: "Feature",
              geometry: {
                type: "Point",
                coordinates: [one["Longitude"], one["Latitude"]],
              },
              properties: {
                ...one,
                color: "#faeb00",
              },
            };
        });
        regularOfficesFeatures = regularOfficesFeatures.filter(
          (one) => one != undefined
        );
        const regularOfficesData = {
          type: "FeatureCollection",
          crs: {
            type: "name",
            properties: {
              name: "urn:ogc:def:crs:OGC:1.3:CRS84",
            },
          },
          features: regularOfficesFeatures,
        };
        displayEmissionClassTable(topOfficesFeatures, regularOfficesFeatures);

        mapboxgl.accessToken = ACCESS_TOKEN;
        map = new mapboxgl.Map({
          container: "map", // container ID
          // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
          // style: "mapbox://styles/mapbox/satellite-streets-v12", // style URL
          // style: "mapbox://styles/mapbox/streets-v12", // style URL
          style: "mapbox://styles/beatricemalorni/clofqr6he005g01qrc93u1uar",
          projection: "globe", // Display the map as a globe, since satellite-v9 defaults to Mercator
          zoom: 2, // starting zoom
          center: [108, 4], // // starting center in [lng, lat]
        });

        map.on("load", function () {
          // Modify the color of the sea
          // map.setPaintProperty("water", "fill-color", "#0072bc");
          // map.setPaintProperty("background", "background-color", "#333333");
        });

        map.on("load", () => {
          insertLayer(
            map,
            layers[0]["sourceId"],
            topOfficesData,
            layers[0]["layerId"],
            layers[0]["iconId"],
            "./assets/icons/yellow_pointer.png",
            "center",
            "#00FF00",
            true
          );
          insertLayer(
            map,
            layers[1]["sourceId"],
            regularOfficesData,
            layers[1]["layerId"],
            layers[1]["iconId"],
            "./assets/icons/blue_pointer.png",
            "top-left",
            "#00FFFF",
            true
          );
          insertLayer(
            map,
            layers[2]["sourceId"],
            greeningBlueData,
            layers[2]["layerId"],
            layers[2]["iconId"],
            "./assets/icons/Greenbox2.png",
            "bottom-left",
            "#0000FF",
            false
          );

          // insertLayer(map,
          //     layers[3]["sourceId"],
          //     fleetData,
          //     layers[3]["layerId"],
          //     layers[3]["iconId"],
          //     './assets/icons/blue_pointer2.png',
          //     'bottom-right',
          //     '#0000FF',
          //     false
          // );
          spinGlobe();
        });

        map.on("click", (event) => {
          const features = map.queryRenderedFeatures(event.point, {
            layers: [
              "top-emission-offices",
              "regular-emission-offices",
              "greening-blue" /*, 'fleet' */,
            ],
          });
          if (!features.length) {
            return;
          }
          const feature = features[0];
          console.log(feature);
          addPopup(feature.properties);
          changeDisplayData(feature.properties);
        });
        map.flyTo({
          essential: true, // this animation is considered essential with respect to prefers-reduced-motion
          zoom: INITIAL_ZOOM,
        });

        displayTotalValues();
      }

      function displayTotalValues() {
        CO2Dom.html(convertNumbersToFixed(totalCO2, 2).toLocaleString());
        used_water_dom.html(
          convertNumbersToFixed(totalUsedWater, 2).toLocaleString()
        );
        generated_waste_dom.html(
          convertNumbersToFixed(totalWaste, 2).toLocaleString()
        );
        calcConsumingElectricityAndCO2(totalKWH, totalCO2);
      }

      // handle the zoomin button click
      function doZoomIn() {
        map.zoomIn();
      }

      // handle the zoomout button click
      function doZoomOut() {
        map.zoomOut();
      }

      // calculate and display the consuming KWH so far from the beginning of that year
      var curElec;
      function calcConsumingElectricityAndCO2(kwh, co2) {
        if (isNaN(Number(kwh))) {
          $("#KWH-display-dom").html(0);
          return;
        }
        const elecPerSec = Number(kwh) / SECONDS_OF_YEAR;
        const co2PerSec = Number(co2) / SECONDS_OF_YEAR;
        const curTime = new Date();
        const startDayOfYear = new Date(curTime.getFullYear(), 0, 1, 0, 0, 0);
        const numSeconds = Math.floor((curTime - startDayOfYear) / 1000);
        curElec = elecPerSec * numSeconds;
        curCO2 = co2PerSec * numSeconds;
        $("#KWH-display-dom").html(
          convertNumbersToFixed(curElec, 2).toLocaleString()
        );
        $("#offices-co2-display-dom").html(
          convertNumbersToFixed(curCO2, 2).toLocaleString()
        );
        KWHTimer = setInterval(() => {
          curElec += (KWH_UPGRADE_PERIOD / 1000) * elecPerSec;
          curCO2 += (KWH_UPGRADE_PERIOD / 1000) * co2PerSec;
          $("#KWH-display-dom").html(
            convertNumbersToFixed(curElec, 2).toLocaleString()
          );
          $("#offices-co2-display-dom").html(
            convertNumbersToFixed(curCO2, 2).toLocaleString()
          );
        }, KWH_UPGRADE_PERIOD);
      }

      function flyHome() {
        if (currentPopup) currentPopup.remove();
        spinEnabled = true;
        map.flyTo({
          center: HOME_POSITION,
          essential: true, // this animation is considered essential with respect to prefers-reduced-motion
          zoom: INITIAL_ZOOM,
        });
        $("#view-office-search-input").val("");
        $("#ui-id-1").hide();
        if (!$("#toggle-layers-view-card").hasClass("d-none"))
          $("#view-toggle-layer-btn").click();
        $("#top-emission-offices-view-card").addClass("d-none");
        $("#regular-emission-offices-view-card").addClass("d-none");
        displayTotalValues();
        initViewLayers();
        // $("#btn-spin").click();
      }

      function addPopup(pointFeature) {
        let popupHtml = ``;
        const kwh =
          Number(pointFeature["Total KWH"]) == 0
            ? " N/A "
            : convertNumbersToFixed(
                Number(pointFeature["Total KWH"]),
                2
              ).toLocaleString();
        console.log("this is kwh " + kwh);
        const wastingWater =
          Number(pointFeature["Water used (m3)"]) == 0
            ? " N/A "
            : convertNumbersToFixed(
                Number(pointFeature["Water used (m3)"]),
                2
              ).toLocaleString();
        const recycledWater =
          Number(pointFeature["Water recycled (m3)"]) == 0
            ? " N/A "
            : convertNumbersToFixed(
                Number(pointFeature["Water recycled (m3)"]),
                2
              ).toLocaleString();
        const generatedWaste =
          Number(pointFeature["Waste generated KG"]) == 0
            ? " N/A "
            : convertNumbersToFixed(
                Number(pointFeature["Waste generated KG"]),
                2
              ).toLocaleString();
        const co2 =
          Number(pointFeature["CO2 Tons (office only)"]) == 0
            ? " N/A "
            : convertNumbersToFixed(
                Number(pointFeature["CO2 Tons (office only)"]),
                2
              ).toLocaleString();
        let greenBoxDomStr =
          pointFeature["Greenboxes"] == "Yes"
            ? `<div class="card" style="border-radius:unset !important"><div class="card-header bg-popup-cyan p-1 pl-3" style="border-radius:unset !important"><a class="card-link text-white d-flex justify-content-between" data-toggle="collapse" href="#collapseGreenBoxes">Green Boxes<i class="bi bi-chevron-down fs-4"></i></a></div><div id="collapseGreenBoxes" class="collapse" data-parent="#accordion"><div class="card-body p-0"><div class="row bg-popup-grey mx-0 text-left"><div class="col-sm-7">Total KWh in 2022</div><div class="col-sm-5">${kwh}</div></div></div></div></div>`
            : "";
        // let greeingBlueDomStr =
        //   pointFeature["Greening the Blue 2023"] == "Yes"
        //     ? `<div class="card bg-popup-grey" style="border-radius:unset !important"><div class="card-header bg-popup-cyan p-1 pl-3" style="border-radius:unset !important"><a class="card-link text-white d-flex justify-content-between" data-toggle="collapse" href="#collapseGreeningBlue"><span>Offices CO<sub>2</sub> emissions</span><i class="bi bi-chevron-down fs-4"></i></a></div><div id="collapseGreeningBlue" class="collapse" data-parent="#accordion"><div class="card-body p-0"><div class="row bg-popup-grey mx-0 text-left"><div class="col-sm-7">Water Used(m<sub>3</sub>)</div><div class="col-sm-5">${wastingWater}</div></div><div class="row bg-popup-blue mx-0 text-left"><div class="col-sm-7">Water recycled(m<sub>3</sub>)</div><div class="col-sm-5">${recycledWater}</div></div><div class="row bg-popup-grey mx-0 text-left"><div class="col-sm-7">Waste generated(Kg)</div><div class="col-sm-5">${generatedWaste}</div></div></div></div></div>`
        //     : "";
        let co2EmissionDomStr =
          pointFeature["Greening the Blue 2023"] == "Yes"
            ? `<div class="card bg-popup-grey" style="border-radius:unset !important"><div class="card-header bg-popup-cyan p-1 pl-3" style="border-radius:unset !important"><a class="card-link text-white d-flex justify-content-between" data-toggle="collapse" href="#collapseGreeningBlue"><span>Offices CO<sub>2</sub> emissions</span><i class="bi bi-chevron-down fs-4"></i></a></div><div id="collapseGreeningBlue" class="collapse" data-parent="#accordion"><div class="card-body p-0"><div class="row bg-popup-grey mx-0 text-left"><div class="col-sm-8">CO<sub>2</sub> tons (office only)</div><div class="col-sm-4">${wastingWater}</div></div></div></div></div>`
            : "";
        let imageFileUrl = `assets/img/offices/${pointFeature["Office (Building code)"]}.jpg`;
        let gross =
          pointFeature["Gross Area (m2)"] == 0
            ? " N/A "
            : convertNumbersToFixed(
                Number(pointFeature["Gross Area (m2)"]),
                2
              ).toLocaleString();
        let staff =
          pointFeature["Number of staff"] == 0
            ? " N/A "
            : Number(pointFeature["Number of staff"]).toLocaleString();
        function doDisplayPopup(img) {
          popupHtml = `<div class="card bg-map-dark" style="width: 250px;"><div class="card-header pb-0 border-0"><strong>UNHCR Office</strong><p class="mb-0" style="color: yellow;"></p></div><div class="card-body text-center p-0"><div class="row bg-map-green mx-0 text-left"><div class="col-sm-6">Location</div><div class="col-sm-6">${
            pointFeature["Location Name"]
          }</div></div><div class="row mx-0 text-left"><div class="col-sm-6">Office Type</div><div class="col-sm-6">${
            pointFeature["Office Type"]
          }</div></div><div class="row bg-map-green mx-0 text-left"><div class="col-sm-6">Country</div><div class="col-sm-6">${
            pointFeature["Country Name"]
          }</div></div><div class="row mx-0 text-left"><div class="col-sm-6">Gross Area(m<sup>2</sup>)</div><div class="col-sm-6">${gross}</div></div><div class="row bg-map-green mx-0 text-left"><div class="col-sm-6">Number of staff</div><div class="col-sm-6">${staff}</div></div><div class="row mx-0 p-0"><div id="demo" class="carousel slide w-100" data-ride="carousel"  ><!-- Indicators --><!-- The slideshow --><div class="carousel-inner"><div class="carousel-item active"><img src="${img}" style="max-height:120px;width:100%;object-fit:cover;"></div></div><!-- Left and right controls --></div></div>${
            greenBoxDomStr + co2EmissionDomStr
          }</div></div>`;
          currentPopup = new mapboxgl.Popup()
            .setLngLat([pointFeature["Longitude"], pointFeature["Latitude"]])
            .setHTML(popupHtml)
            .addTo(map);
          if (curOfficeCode == pointFeature["Office (Building code)"]) return;
          curOfficeCode = pointFeature["Office (Building code)"];
        }

        fetch(imageFileUrl)
          .then((response) => {
            if (!response.ok)
              imageFileUrl = `assets/img/offices/GRCOREOFU02.jpg`;
            doDisplayPopup(imageFileUrl);
          })
          .then((data) => {})
          .catch((error) => {
            console.log("this is error");
          });
      }

      function initViewLayers() {
        if ($("#toggle-fleet-btn i").hasClass("bi-eye")) {
          $("#toggle-fleet-btn i").click();
        }
        if ($("#toggle-greening-btn i").hasClass("bi-eye")) {
          $("#toggle-greening-btn i").click();
        }
        if ($("#toggle-boxes-btn i").hasClass("bi-eye")) {
          $("#toggle-boxes-btn i").click();
        }
        if ($("#toggle-offices-btn i").hasClass("bi-eye-slash")) {
          $("#toggle-offices-btn i").click();
        }
      }

      function changeDisplayData(prop) {
        let val = isNaN(Number(prop["Total CO2 (tons)"]))
          ? 0
          : Number(prop["Total CO2 (tons)"]);
        CO2Dom.html(convertNumbersToFixed(val, 2).toLocaleString());
        val = isNaN(Number(prop["Water used (m3)"]))
          ? 0
          : Number(prop["Water used (m3)"]);
        used_water_dom.html(convertNumbersToFixed(val, 2).toLocaleString());
        val = isNaN(Number(prop["Waste generated KG"]))
          ? 0
          : Number(prop["Waste generated KG"]);
        generated_waste_dom.html(
          convertNumbersToFixed(val, 2).toLocaleString()
        );
        val = isNaN(Number(prop["Total KWH"])) ? 0 : Number(prop["Total KWH"]);
        let co2 = isNaN(Number(prop["Total CO2 (tons)"]))
          ? 0
          : Number(prop["Total CO2 (tons)"]);
        calcConsumingElectricityAndCO2(val, co2);
      }

      function displayEmissionClassTable(top, regular) {
        const topDom = $("#top-emission-offices-view-card tbody");
        let domStr = "";
        for (let one of top) {
          one = one["properties"];
          domStr += `<tr><td>${
            one["Location Name"]
          }</td><td>${convertNumbersToFixed(
            one["CO2 Tons (office only)"],
            2
          ).toLocaleString()}</td></tr>`;
        }
        topDom.append(domStr);
        domStr = "";
        const regularDom = $("#regular-emission-offices-view-card tbody");
        for (let one of regular) {
          one = one["properties"];
          domStr += `<tr><td>${
            one["Location Name"]
          }</td><td>${convertNumbersToFixed(
            one["CO2 Tons (office only)"],
            2
          ).toLocaleString()}</td></tr>`;
        }
        regularDom.append(domStr);
      }
    </script>
    <script src="./assets/js/rotation.js"></script>
    <script src="./assets/js/init_autocomplete.js"></script>
    <script src="./assets/js/common.js"></script>
  </body>
</html>
